<ResourceDictionary
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:vsUI="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
    mc:Ignorable="d" >

    <Style TargetType="UserControl">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowBackgroundBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowTextBrushKey}}"/>
    </Style>

    <Style TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowButtonInactiveBorderBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ButtonTextBrushKey}}" />
    </Style>

    <Style TargetType="ToolBarTray">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.CommandShelfBackgroundGradientBrushKey}}" />
    </Style>

    <Style TargetType="ToolBar">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowTabBorderBrushKey}}" />
    </Style>

    <Style TargetType="Label">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ButtonTextBrushKey}}" />
    </Style>

    <Style TargetType="DataGrid">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowBackgroundBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ButtonTextBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowBorderBrushKey}}" />
        <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowContentGridBrushKey}}" />
        <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowContentGridBrushKey}}" />
    </Style>

    <Style TargetType="DataGridCell">
        <!--<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource ValueToBrushConverter}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ButtonTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="0" />-->
        <!--<Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.SystemHighlightBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="DataGridColumnHeader">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowBackgroundBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowTextBrushKey}}"/>
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridColumnHeader">
                    <Grid Name="HeaderGrid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="BackgroundBorder" BorderThickness="0,1,1,1" BorderBrush="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowBorderBrushKey}}" Grid.ColumnSpan="2" />
                        <ContentPresenter Margin="6,3,6,3" VerticalAlignment="Center" Grid.Column="0" />
                        <Path x:Name="SortArrow" Visibility="Collapsed" Data="M0,0 L1,0 0.5,1 z" Stretch="Fill" 
                            Grid.Column="1" Width="8" Height="6" Fill="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowButtonActiveGlyphBrushKey}}" Margin="0,0,8,0" 
                            VerticalAlignment="Center" RenderTransformOrigin="0.5,0.4" />
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Cursor="SizeWE" Grid.Column="1" >
                            <Thumb.Style>
                                <Style TargetType="{x:Type Thumb}">
                                    <Setter Property="Width" Value="2" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                <Border Background="Transparent"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Thumb.Style>
                        </Thumb>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SortDirection" Value="Ascending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                            <Setter TargetName="SortArrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowButtonHoverActiveBrushKey}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowButtonDownBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TreeView">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowBackgroundBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ButtonTextBrushKey}}" />
    </Style>

    <Style TargetType="TreeViewItem">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowBackgroundBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ButtonTextBrushKey}}" />
    </Style>

    <Style TargetType="TextBlock">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowBackgroundBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ButtonTextBrushKey}}" />
    </Style>

    <Style TargetType="TextBox" x:Key="UniversalTextBox">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ButtonTextBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBoxBase">
                    <Border Name="Border" BorderThickness="1">
                        <Border.Background>
                            <SolidColorBrush Color="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowBackgroundColorKey}}" />
                        </Border.Background>
                        <Border.BorderBrush>
                            <SolidColorBrush Color="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowBorderColorKey}}" />
                        </Border.BorderBrush>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <!--<Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledControlLightColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>-->
                                </VisualState>
                                <VisualState x:Name="ReadOnly">
                                    <!--<Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledControlDarkColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>-->
                                </VisualState>
                                <VisualState x:Name="MouseOver" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost" Foreground="{DynamicResource {x:Static vsUI:EnvironmentColors.ButtonTextBrushKey}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.SystemHighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.SystemHighlightBrushKey}}" />
                        </Trigger>
                        <DataTrigger></DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Separator">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowBorderBrushKey}}" />
    </Style>
    <!--<Style TargetType="ComboBox">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowBackgroundBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ButtonTextBrushKey}}" />
    </Style>-->

    <!--<Style TargetType="DataGridCell">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ToolWindowBackgroundBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ButtonTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static vsUI:EnvironmentColors.ComboBoxSelectionBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>-->
    <!--<local:ValueToBrushConverter x:Key="ValueToBrushConverter"/>
    <Style TargetType="TreeView">
        <Setter Property="Background" Value="{DynamicResource {x:Static Brushes.Yellow}}"/>
    </Style>
    <Style TargetType="Grid">
        <Setter Property="Background" Value="{DynamicResource {x:Static Brushes.Yellow}}"/>
    </Style>
    <Style TargetType="DataGrid">
        <Setter Property="Background" Value="{DynamicResource {x:Static Brushes.Yellow}}"/>
    </Style>-->
    <!--<Style TargetType="DataGridCell">
        --><!--<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource ValueToBrushConverter}}"/>--><!--
        <Setter Property="Background" Value="{DynamicResource {x:Static Brushes.Yellow}}"/>
        --><!--<Setter Property="Foreground" Value="{DynamicResource {x:Static Brushes.Yellow}}"/>--><!--
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static Brushes.Yellow}}"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static Brushes.Yellow}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static Brushes.Yellow}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>-->
    <!--<Style x:Key="DataGridRowStyle" TargetType="DataGridRow">
        --><!--<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource ValueToBrushConverter}}"/>--><!--
        <Setter Property="Background" Value="{DynamicResource {x:Static Brushes.Yellow}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static Brushes.Yellow}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static Brushes.Yellow}}"/>
    </Style>-->
    <!--<Style TargetType="ToolBar">
        <Setter Property="Background" Value="{DynamicResource {x:Static Brushes.Yellow}}"/>
    </Style>-->
    <!--<Style x:Key="LabelStyle" TargetType="Label">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static Brushes.Yellow}}"/>
    </Style>
    <Style x:Key="TextBlockStyle" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static Brushes.Yellow}}"/>
    </Style>
    <Style x:Key="TextBoxStyle" TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource {x:Static Brushes.Yellow}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static Brushes.Yellow}}"/>
    </Style>
    <Style x:Key="ComboBoxStyle" TargetType="ComboBox">
        <Setter Property="Background" Value="{DynamicResource {x:Static Brushes.Yellow}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static Brushes.Yellow}}"/>
    </Style>-->
    <!--<Style TargetType="CheckBox">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsVisibleCheckBox}" Value="false">
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>-->
</ResourceDictionary>
